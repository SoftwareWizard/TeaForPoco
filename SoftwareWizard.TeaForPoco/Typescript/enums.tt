<#@ include file="..\TeaForPoco.Core.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.ts" #>
<#
    // Please make changes to the settings below.
    // All you have to do is save this file, and the output file(s) is/are generated.
    // or Select "Run Custom Tool" from File Context Menu
    // or Select "Transform all T4 Templates" from VS Build Menu.
    // Compiling does not regenerate the file(s)!
    // Hint: Before modifing the template install T4 Editor Plugin for VS from Devart and ForTea Resharper Plugin. Have more fun.
    
    // Main settings **********************************************************************************************************************
    EnumModuleName = "enums";
    EnumPath = @"..\SampleEnum";
#>
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression

module <#=        EnumModuleName #>
{
<#
    var path = Host.ResolvePath(EnumPath);
    var enumItems = ReadEnums(path);

    foreach (var enumItem in enumItems) { #>
    export enum <#=            enumItem.Name #>
    {
<#        foreach (var enumMemberItem in enumItem.EnumMemberItems) { 
            WriteEnumMemberItem(enumMemberItem);
        } #>
    }

<#    } #>
}
// </auto-generated>
<#+    private void WriteEnumMemberItem(EnumMemberItem enumMemberItem) { 
        if (string.IsNullOrEmpty(enumMemberItem.Value)) { #>
        <#=            ToLowerCamelCase(enumMemberItem.Name) #>,
<#+
        } else { #>
        <#=            ToLowerCamelCase(enumMemberItem.Name) #>=<#=            ToLowerCamelCase(enumMemberItem.Value) #>,
<#+
        } 
    } #>

<#+ private static string ToLowerCamelCase(string name)
    {
        return !string.IsNullOrEmpty(name) 
            ? $"{name[0].ToString().ToLowerInvariant()}{name.Substring(1)}" 
            : name;
    }
#>
